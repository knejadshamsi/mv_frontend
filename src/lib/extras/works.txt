//////creating a map 

//onMount(()=> {
    //map = document.querySelector(".maplibregl-map").map
    //console.log(map)
    //})




////// the manual way

function test() {
      console.log("fired")
      let test4 = setInterval(function(){
        testlocation2.lat = testlocation2.lat-0.0001
        if (testlocation2.lat< 44) {
          clearInterval(test4)
          console.log("done!")
        }
      },1000)
    }

//// from page.svelte onmount // does not work

    //onMount(()=> {
         //gsap.registerPlugin(AttrPlugin)
        //let header_timeline = gsap.timeline({duration:0.2,paused:true, ease:"power4.out"})
        //header_timeline.to("header",{ background: "linear-gradient(to bottom, rgba(132,21,38,0.4) , rgba(132,21,38,0)"},'ha')
        //.to("#full", {opacity:0.3},'ha')
        //.to("#Abbreviation", {textShadow:"-2px 3px 0px var(--brand_main)"}, 'ha')
    //})


    //// from page // kinda works 

      <!--
  {#each metroLines.features as data (data.properties.id)}
    <GeoJSON id="ml_{data.properties.id}" data={data}>
      {#if layertoggle.ml === true}
        <LineLayer
          layout={{ 'line-cap': 'round', 'line-join': 'round' }}
          paint={{
            'line-width': 5,
            'line-color': data.properties.color,
            'line-opacity': 0.8,
          }}
        />
      {/if}
    </GeoJSON>
  {/each}--->
  <!---{#if (layertoggle.bis == true)}
  <Marker lngLat={location} class="testing_movement">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm0 18.25c-.69 0-1.25-.56-1.25-1.25s.56-1.25 1.25-1.25c.691 0 1.25.56 1.25 1.25s-.559 1.25-1.25 1.25zm1.961-5.928c-.904.975-.947 1.514-.935 2.178h-2.005c-.007-1.475.02-2.125 1.431-3.468.573-.544 1.025-.975.962-1.821-.058-.805-.73-1.226-1.365-1.226-.709 0-1.538.527-1.538 2.013h-2.01c0-2.4 1.409-3.95 3.59-3.95 1.036 0 1.942.339 2.55.955.57.578.865 1.372.854 2.298-.016 1.383-.857 2.291-1.534 3.021z"/></svg>
</Marker>
  {/if}--->



  ////// metro lines filtering and coloring 

  
{#if mlToggle}
<GeoJSON data={metroLines}>
  {#each metroLines.features as Line (Line.properties.id)}
  <LineLayer
  layout={{ 'line-cap': 'round', 'line-join': 'round' }}
  filter={['==', ['get', 'color'], Line["properties"]["color"]]}
  paint={{
    'line-width': 5,
    'line-color': Line["properties"]["color"],
    'line-opacity':0.5,
  }} />
{/each}
</GeoJSON>
{/if}


//// Dispatching 

    //import { createEventDispatcher } from 'svelte'
    //const dispatch = createEventDispatcher()

    //dispatch('ScenarioSwitch', {id: id})



//// extras from 3d building importing

			<!-- <T.Mesh geometry={gltf.nodes[mesh_list_two[0]].geometry} 
				position={mesh_list_coord_two[0].split(',').map(Number)}
                    on:pointerenter={() => enterMesh(mesh)} 
                    on:pointerleave={() => leaveMesh()}>
					<T.MeshStandardMaterial color={$activeMesh === mesh ? '#99ff99' : '#ffffff'} />
				</T.Mesh> -->
			<!-- <T.Mesh geometry={gltf.nodes[mesh_list[100]].geometry} 
					position={gpt}
                    on:pointerenter={() => enterMesh(mesh_list[10])} 
                    on:pointerleave={() => leaveMesh()}>
					<T.MeshStandardMaterial color={$activeMesh === mesh_list[0] ? '#99ff99' : '#ffffff'} />
				</T.Mesh> -->

	//import { writable } from 'svelte/store';

	//color={$activeMesh === mesh ? '#99ff99' : '#ffffff'}


////// extras from raycasting attemps

    // function testing() {
    //   const rap_world = useRapier()
    //   const forwardVector = new Vector3(0, 0, -1)
    //   const direction =  forwardVector.applyQuaternion(cam.quaternion).normalize()
    //   const correct_pos = new Vector3(position[0],position[1],position[2])
    //   const ray = new Ray(correct_pos,direction)
    //   const hit = rap_world.world.queryPipeline.castRay(,ray, 1000, true, null);
      
    //   if (hit) {
    //   console.log(`Hit object at point`);
    //   } else {
    //     console.log("No hit")
    //   }
    // }

    // function testing() {
    //   const raycaster = new Raycaster();
    //   const pointer = new Vector2(0, 0);
    //   const { scene, camera } = useThrelte();
    //   raycaster.setFromCamera(pointer, camera);
    //   const intersects = raycaster.intersectObjects( scene.children );
    //   const el = intersects[0]["object"]["userData"]["id"]
    //   console.log(intersects);
    //   console.log(el)
    //   activeMesh.set(el)
    // }